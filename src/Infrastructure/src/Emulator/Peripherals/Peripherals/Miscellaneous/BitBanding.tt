<#
//
// Copyright (c) 2010-2018 Antmicro
// Copyright (c) 2011-2015 Realtime Embedded
//
// This file is licensed under the MIT License.
// Full license text is available in 'licenses/MIT.txt'.
//
#>
<#@ template language="C#v3.5" debug="True"#>
<#@ import namespace="System.Collections.Generic" #>
<#
    Dictionary<string, Tuple<string, int, int>> types = new Dictionary<string, Tuple<string, int, int>>();
    types.Add("byte", Tuple.Create("Byte", 0, 7));
    types.Add("ushort", Tuple.Create("Word", 1, 15));
    types.Add("uint", Tuple.Create("DoubleWord", 3, 31));
#>
/********************************************************
*
* Warning!
* This file was generated automatically.
* Please do not edit. Changes should be made in the
* appropriate *.tt file.
*
*/

using System;
using Antmicro.Renode.Core;
using Antmicro.Renode.Peripherals.Bus;
using Antmicro.Renode.Logging;

namespace Antmicro.Renode.Peripherals.Miscellaneous
{
    public sealed class BitBanding : IBytePeripheral, IWordPeripheral, IDoubleWordPeripheral
    {
        public BitBanding(Machine machine, ulong peripheralBase)
        {
            sysbus = machine.SystemBus;
            this.peripheralBase = peripheralBase;
        }

        public void Reset()
        {
            // nothing happens
        }

<#

    foreach(var entry in types)
    {
        var type = entry.Key;
        var name = entry.Value.Item1;
        var realAddressMask = entry.Value.Item2;
        var bitNumberMask = entry.Value.Item3;
#>
        public <#= type #> Read<#= name #>(long offset)
        {
            var realAddress = GetBitBandAddress(offset) & ~<#= realAddressMask #>UL;
            var readValue = sysbus.Read<#= name #>(realAddress);
            var bitNumber = (int)(offset >> 2) & <#= bitNumberMask #>;
            return (<#= type #>)((readValue >> bitNumber) & 1);
        }

        public void Write<#= name #>(long offset, <#= type #> value)
        {
            var realAddress = GetBitBandAddress(offset) & ~<#= realAddressMask #>UL;
            var readValue = sysbus.Read<#= name #>(realAddress);
            var bitNumber = (int)(offset >> 2) & <#= bitNumberMask #>;
            var mask = (1 << bitNumber);
            if((value & 1) == 1)
            {
                readValue |= (<#= type #>)mask;
            }
            else
            {
                readValue &= (<#= type #>)~mask;
            }
            sysbus.Write<#= name #>(realAddress, readValue);
        }

<#
    }
#>
        private ulong GetBitBandAddress(long from)
        {
            var retval = peripheralBase + checked((ulong)(from >> 5));
            this.NoisyLog("Bit-band operation: 0x{0:X} -> 0x{1:X}.", from, retval);
            return retval;
        }

        private readonly SystemBus sysbus;
        private readonly ulong peripheralBase;
    }
}
